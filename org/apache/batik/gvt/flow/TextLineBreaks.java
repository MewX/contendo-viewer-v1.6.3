/*      */ package org.apache.batik.gvt.flow;
/*      */ 
/*      */ import java.text.AttributedCharacterIterator;
/*      */ import java.text.AttributedString;
/*      */ import java.util.HashSet;
/*      */ import java.util.Set;
/*      */ import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class TextLineBreaks
/*      */ {
/*   34 */   public static final AttributedCharacterIterator.Attribute WORD_LIMIT = (AttributedCharacterIterator.Attribute)new GVTAttributedCharacterIterator.TextAttribute("WORD_LIMIT");
/*      */ 
/*      */   
/*   37 */   public static final AttributedCharacterIterator.Attribute FLOW_PARAGRAPH = (AttributedCharacterIterator.Attribute)GVTAttributedCharacterIterator.TextAttribute.FLOW_PARAGRAPH;
/*      */ 
/*      */   
/*   40 */   public static final AttributedCharacterIterator.Attribute FLOW_LINE_BREAK = (AttributedCharacterIterator.Attribute)GVTAttributedCharacterIterator.TextAttribute.FLOW_LINE_BREAK;
/*      */   
/*      */   public static final char CHAR_ZERO_WIDTH_JOINER = '‍';
/*   43 */   static Set lineBrks = new HashSet(); protected static final int QUICK_LUT_SIZE = 256;
/*      */   
/*      */   static {
/*   46 */     lineBrks.add(FLOW_PARAGRAPH);
/*   47 */     lineBrks.add(FLOW_LINE_BREAK);
/*      */   }
/*      */   
/*      */   public static final byte BREAK_ACTION_DIRECT = 0;
/*      */   
/*      */   static int findComplexBreak(AttributedCharacterIterator aci) {
/*   53 */     int cnt = 0;
/*   54 */     char ch = aci.current();
/*   55 */     for (; ch == Character.MAX_VALUE; 
/*   56 */       ch = aci.next(), cnt++) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*   62 */       if (getCharCharClass(ch) != 20)
/*      */         break; 
/*      */     } 
/*   65 */     return cnt;
/*      */   }
/*      */   public static final byte BREAK_ACTION_INDIRECT = 1;
/*      */   public static final byte BREAK_ACTION_PROHIBITED = 2;
/*      */   
/*      */   public static void findLineBrk(AttributedString as) {
/*   71 */     AttributedCharacterIterator aci = as.getIterator();
/*   72 */     if (aci.getEndIndex() == 0)
/*      */       return; 
/*   74 */     char ch = aci.current(), prevCh = Character.MAX_VALUE;
/*   75 */     byte cls = getCharCharClass(ch);
/*   76 */     if (cls == 25) cls = 22; 
/*   77 */     byte curCls = cls;
/*   78 */     byte prevCls = cls;
/*   79 */     byte prevPrevCls = -1;
/*   80 */     int wordCnt = 0;
/*   81 */     int wordBegin = aci.getBeginIndex();
/*      */     
/*   83 */     int ich = wordBegin + 1;
/*   84 */     int lineEnd = aci.getRunLimit(lineBrks);
/*      */ 
/*      */     
/*   87 */     if (cls >= 19) cls = 11;
/*      */     
/*   89 */     ch = aci.next();
/*   90 */     for (; ch != Character.MAX_VALUE; 
/*   91 */       ich++, prevCh = ch, ch = aci.next(), 
/*   92 */       prevPrevCls = prevCls, prevCls = curCls) {
/*      */       
/*   94 */       if (ich == lineEnd) {
/*   95 */         as.addAttribute(WORD_LIMIT, Integer.valueOf(wordCnt++), wordBegin, ich);
/*      */         
/*   97 */         wordBegin = ich;
/*      */         
/*   99 */         cls = getCharCharClass(ch);
/*  100 */         curCls = cls;
/*  101 */         prevCls = cls;
/*  102 */         if (cls >= 19) cls = 11;
/*      */         
/*  104 */         lineEnd = aci.getRunLimit(lineBrks);
/*      */       
/*      */       }
/*      */       else {
/*      */         
/*  109 */         curCls = getCharCharClass(ch);
/*  110 */         if (curCls != 21)
/*      */         {
/*      */ 
/*      */ 
/*      */ 
/*      */           
/*  116 */           if (curCls == 20) {
/*  117 */             ich += findComplexBreak(aci);
/*  118 */             ch = aci.previous();
/*  119 */             if (ch != Character.MAX_VALUE)
/*  120 */               prevCls = getCharCharClass(ch); 
/*  121 */             ch = aci.next();
/*  122 */             if (ch != Character.MAX_VALUE) {
/*  123 */               curCls = cls = getCharCharClass(ch);
/*      */ 
/*      */             
/*      */             }
/*      */           
/*      */           }
/*  129 */           else if (ch != '‍' && prevCh != '‍') {
/*      */ 
/*      */ 
/*      */             
/*  133 */             if (curCls == 22 || curCls == 25) {
/*  134 */               as.addAttribute(WORD_LIMIT, Integer.valueOf(wordCnt++), wordBegin, ich);
/*      */               
/*  136 */               wordBegin = ich;
/*  137 */               cls = 22;
/*      */             
/*      */             }
/*  140 */             else if (prevCls == 24) {
/*  141 */               as.addAttribute(WORD_LIMIT, Integer.valueOf(wordCnt++), wordBegin, ich - 1);
/*      */               
/*  143 */               wordBegin = ich - 1;
/*  144 */               cls = 22;
/*      */             
/*      */             }
/*  147 */             else if (curCls != 24) {
/*      */ 
/*      */ 
/*      */ 
/*      */               
/*  152 */               if (curCls == 19)
/*  153 */               { if (prevCls == 21) {
/*  154 */                   cls = 12;
/*  155 */                   if (prevPrevCls != -1 && 
/*  156 */                     brkPairs[prevPrevCls][12] == 0)
/*      */                   {
/*  158 */                     as.addAttribute(WORD_LIMIT, Integer.valueOf(wordCnt++), wordBegin, ich - 1);
/*      */                     
/*  160 */                     wordBegin = ich - 1;
/*      */ 
/*      */                   
/*      */                   }
/*      */ 
/*      */ 
/*      */                 
/*      */                 }
/*      */                 
/*      */                  }
/*      */               
/*  171 */               else if (cls == 22)
/*  172 */               { cls = curCls;
/*      */                  }
/*      */               
/*      */               else
/*      */               
/*  177 */               { byte brk = brkPairs[cls][curCls];
/*      */                 
/*  179 */                 if (brk == 0) {
/*  180 */                   as.addAttribute(WORD_LIMIT, Integer.valueOf(wordCnt++), wordBegin, ich);
/*      */                   
/*  182 */                   wordBegin = ich;
/*      */                 }
/*  184 */                 else if (brk == 1 && 
/*  185 */                   prevCls == 21) {
/*  186 */                   as.addAttribute(WORD_LIMIT, Integer.valueOf(wordCnt++), wordBegin, ich);
/*      */                   
/*  188 */                   wordBegin = ich;
/*      */                 } 
/*      */ 
/*      */ 
/*      */ 
/*      */                 
/*  194 */                 cls = curCls; } 
/*      */             } 
/*      */           }  } 
/*      */       } 
/*  198 */     }  as.addAttribute(WORD_LIMIT, Integer.valueOf(wordCnt++), wordBegin, ich);
/*      */     
/*  200 */     wordBegin = ich;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static byte[] stringToLineBreakClasses(String s) {
/*  207 */     int len = s.length();
/*  208 */     byte[] ret = new byte[len];
/*  209 */     for (int i = 0; i < len; i++) {
/*  210 */       ret[i] = getCharCharClass(s.charAt(i));
/*      */     }
/*  212 */     return ret;
/*      */   }
/*      */   
/*      */   public static byte getCharCharClass(char ch) {
/*  216 */     if (ch < 'Ā') {
/*  217 */       if (quickLut == null) buildQuickLut(); 
/*  218 */       return quickLut[ch];
/*      */     } 
/*  220 */     int len = raw_data.length;
/*  221 */     int l = 0;
/*  222 */     int r = len / 2 - 1;
/*  223 */     int entry = (l + r) / 2;
/*  224 */     while (l <= r) {
/*  225 */       char min = raw_data[2 * entry];
/*  226 */       char max = raw_data[2 * entry + 1];
/*  227 */       if (ch < min) { r = entry - 1; }
/*  228 */       else if (ch > max) { l = entry + 1; }
/*      */       else { break; }
/*  230 */        entry = (l + r) / 2;
/*      */     } 
/*  232 */     return raw_classes[entry];
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected static void buildQuickLut() {
/*  240 */     int entry = 0;
/*  241 */     quickLut = new byte[256];
/*  242 */     int i = 0;
/*  243 */     while (i < 256) {
/*  244 */       int max = raw_data[2 * entry + 1];
/*  245 */       byte cls = raw_classes[entry];
/*  246 */       while (i <= max) {
/*  247 */         quickLut[i] = cls;
/*  248 */         i++;
/*  249 */         if (i >= 256)
/*      */           break; 
/*  251 */       }  entry++;
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  262 */   public static final String[] brkStrs = new String[] { "DB", "IB", "PB" };
/*      */   
/*      */   public static final byte CHAR_CLASS_OP = 0;
/*      */   
/*      */   public static final byte CHAR_CLASS_CL = 1;
/*      */   
/*      */   public static final byte CHAR_CLASS_QU = 2;
/*      */   
/*      */   public static final byte CHAR_CLASS_GL = 3;
/*      */   public static final byte CHAR_CLASS_NS = 4;
/*      */   public static final byte CHAR_CLASS_EX = 5;
/*      */   public static final byte CHAR_CLASS_SY = 6;
/*      */   public static final byte CHAR_CLASS_IS = 7;
/*      */   public static final byte CHAR_CLASS_PR = 8;
/*      */   public static final byte CHAR_CLASS_PO = 9;
/*      */   public static final byte CHAR_CLASS_NU = 10;
/*      */   public static final byte CHAR_CLASS_AL = 11;
/*      */   public static final byte CHAR_CLASS_ID = 12;
/*      */   public static final byte CHAR_CLASS_IN = 13;
/*      */   public static final byte CHAR_CLASS_HY = 14;
/*      */   public static final byte CHAR_CLASS_BA = 15;
/*      */   public static final byte CHAR_CLASS_BB = 16;
/*      */   public static final byte CHAR_CLASS_B2 = 17;
/*      */   public static final byte CHAR_CLASS_ZW = 18;
/*      */   public static final byte CHAR_CLASS_CM = 19;
/*      */   public static final byte CHAR_CLASS_SA = 20;
/*      */   public static final byte CHAR_CLASS_SP = 21;
/*      */   public static final byte CHAR_CLASS_BK = 22;
/*      */   public static final byte CHAR_CLASS_AI = 11;
/*      */   public static final byte CHAR_CLASS_CR = 24;
/*      */   public static final byte CHAR_CLASS_LF = 25;
/*      */   public static final byte CHAR_CLASS_SG = 11;
/*      */   public static final byte CHAR_CLASS_XX = 11;
/*      */   public static final byte CHAR_CLASS_CB = 28;
/*  296 */   public static final String[] clsStrs = new String[] { "OP", "CL", "QU", "GL", "NS", "EX", "SY", "IS", "PR", "PO", "NU", "AL", "ID", "IN", "HY", "BA", "BB", "B2", "ZW", "CM", "SA", "SP", "BK", "AI", "CR", "LF", "SG", "XX", "CB" };
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  301 */   static byte[][] brkPairs = new byte[][] { { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 }, { 0, 2, 1, 1, 2, 2, 2, 2, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 1 }, { 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1 }, { 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1 }, { 0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 1 }, { 0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 1 }, { 0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 2, 1 }, { 0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 2, 1 }, { 1, 2, 1, 1, 1, 2, 2, 2, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 2, 1 }, { 0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 1 }, { 0, 2, 1, 1, 1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 2, 1 }, { 0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 2, 1 }, { 0, 2, 1, 1, 1, 2, 2, 2, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 2, 1 }, { 0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 2, 1 }, { 0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 1 }, { 0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 1 }, { 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1 }, { 0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 2, 1 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1 }, { 0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 2, 1 } };
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  363 */   static byte[] quickLut = null;
/*      */   
/*  365 */   static final char[] raw_data = new char[] { Character.MIN_VALUE, '\b', '\t', '\t', '\n', '\n', '\013', '\013', '\f', '\f', '\r', '\r', '\016', '\037', ' ', ' ', '!', '!', '"', '"', '#', '#', '$', '$', '%', '%', '&', '&', '\'', '\'', '(', '(', ')', ')', '*', '*', '+', '+', ',', ',', '-', '-', '.', '.', '/', '/', '0', '9', ':', ';', '<', '>', '?', '?', '@', 'Z', '[', '[', '\\', '\\', ']', ']', '^', 'z', '{', '{', '|', '|', '}', '}', '~', '~', '', '', ' ', ' ', '¡', '¡', '¢', '¢', '£', '¥', '¦', '¦', '§', '¨', '©', '©', 'ª', 'ª', '«', '«', '¬', '¬', '­', '­', '®', '¯', '°', '°', '±', '±', '²', '³', '´', '´', 'µ', 'µ', '¶', 'º', '»', '»', '¼', '¿', 'À', 'Å', 'Æ', 'Æ', 'Ç', 'Ï', 'Ð', 'Ð', 'Ñ', 'Ö', '×', 'Ø', 'Ù', 'Ý', 'Þ', 'á', 'â', 'å', 'æ', 'æ', 'ç', 'ç', 'è', 'ê', 'ë', 'ë', 'ì', 'í', 'î', 'ï', 'ð', 'ð', 'ñ', 'ñ', 'ò', 'ó', 'ô', 'ö', '÷', 'ú', 'û', 'û', 'ü', 'ü', 'ý', 'ý', 'þ', 'þ', 'ÿ', 'Ā', 'ā', 'ā', 'Ă', 'Đ', 'đ', 'đ', 'Ē', 'Ē', 'ē', 'ē', 'Ĕ', 'Ě', 'ě', 'ě', 'Ĝ', 'ĥ', 'Ħ', 'ħ', 'Ĩ', 'Ī', 'ī', 'ī', 'Ĭ', 'İ', 'ı', 'ĳ', 'Ĵ', 'ķ', 'ĸ', 'ĸ', 'Ĺ', 'ľ', 'Ŀ', 'ł', 'Ń', 'Ń', 'ń', 'ń', 'Ņ', 'Ň', 'ň', 'Ŋ', 'ŋ', 'Ō', 'ō', 'ō', 'Ŏ', 'ő', 'Œ', 'œ', 'Ŕ', 'ť', 'Ŧ', 'ŧ', 'Ũ', 'Ū', 'ū', 'ū', 'Ŭ', 'Ǎ', 'ǎ', 'ǎ', 'Ǐ', 'Ǐ', 'ǐ', 'ǐ', 'Ǒ', 'Ǒ', 'ǒ', 'ǒ', 'Ǔ', 'Ǔ', 'ǔ', 'ǔ', 'Ǖ', 'Ǖ', 'ǖ', 'ǖ', 'Ǘ', 'Ǘ', 'ǘ', 'ǘ', 'Ǚ', 'Ǚ', 'ǚ', 'ǚ', 'Ǜ', 'Ǜ', 'ǜ', 'ǜ', 'ǝ', 'ɐ', 'ɑ', 'ɑ', 'ɒ', 'ɠ', 'ɡ', 'ɡ', 'ɢ', 'ˆ', 'ˇ', 'ˇ', 'ˈ', 'ˈ', 'ˉ', 'ˋ', 'ˌ', 'ˌ', 'ˍ', 'ˍ', 'ˎ', 'ˏ', 'ː', 'ː', 'ˑ', '˗', '˘', '˛', '˜', '˜', '˝', '˝', '˞', 'ˮ', '̀', 'ͯ', 'ʹ', 'ΐ', 'Α', 'Ω', 'Ϊ', 'ΰ', 'α', 'ρ', 'ς', 'ς', 'σ', 'ω', 'ϊ', 'Ѐ', 'Ё', 'Ё', 'Ђ', 'Џ', 'А', 'я', 'ѐ', 'ѐ', 'ё', 'ё', 'ђ', '҂', '҃', '҉', 'Ҋ', 'և', '։', '։', '֊', '֊', '֑', 'ֽ', '־', '־', 'ֿ', 'ֿ', '׀', '׀', 'ׁ', 'ׂ', '׃', '׃', 'ׄ', 'ׄ', 'א', 'ي', 'ً', 'ٕ', '٠', '٩', '٪', 'ٯ', 'ٰ', 'ٰ', 'ٱ', 'ە', 'ۖ', 'ۤ', 'ۥ', 'ۦ', 'ۧ', 'ۨ', '۩', '۩', '۪', 'ۭ', '۰', '۹', 'ۺ', '܍', '܏', '܏', 'ܐ', 'ܐ', 'ܑ', 'ܑ', 'ܒ', 'ܬ', 'ܰ', '݊', 'ހ', 'ޥ', 'ަ', 'ް', 'ޱ', 'ޱ', 'ँ', 'ः', 'अ', 'ह', '़', '़', 'ऽ', 'ऽ', 'ा', '्', 'ॐ', 'ॐ', '॑', '॔', 'क़', 'ॡ', 'ॢ', 'ॣ', '।', '॥', '०', '९', '॰', '॰', 'ঁ', 'ঃ', 'অ', 'হ', '়', 'ৗ', 'ড়', 'ৡ', 'ৢ', 'ৣ', '০', '৯', 'ৰ', 'ৱ', '৲', '৳', '৴', '৺', 'ਂ', 'ਂ', 'ਅ', 'ਹ', '਼', '੍', 'ਖ਼', 'ਫ਼', '੦', '੯', 'ੰ', 'ੱ', 'ੲ', 'ੴ', 'ઁ', 'ઃ', 'અ', 'હ', '઼', '઼', 'ઽ', 'ઽ', 'ા', '્', 'ૐ', 'ૠ', '૦', '૯', 'ଁ', 'ଃ', 'ଅ', 'ହ', '଼', '଼', 'ଽ', 'ଽ', 'ା', 'ୗ', 'ଡ଼', 'ୡ', '୦', '୯', '୰', '୰', 'ஂ', 'ஂ', 'ஃ', 'ஹ', 'ா', 'ௗ', '௧', '௯', '௰', '௲', 'ఁ', 'ః', 'అ', 'హ', 'ా', 'ౖ', 'ౠ', 'ౡ', '౦', '౯', 'ಂ', 'ಃ', 'ಅ', 'ಹ', 'ಾ', 'ೖ', 'ೞ', 'ೡ', '೦', '೯', 'ം', 'ഃ', 'അ', 'ഹ', 'ാ', 'ൗ', 'ൠ', 'ൡ', '൦', '൯', 'ං', 'ඃ', 'අ', 'ෆ', '්', 'ෳ', '෴', '෴', 'ก', 'ะ', 'ั', 'ั', 'า', 'ำ', 'ิ', 'ฺ', '฿', '฿', 'เ', 'ๆ', '็', '๎', '๏', '๏', '๐', '๙', '๚', '๛', 'ກ', 'ະ', 'ັ', 'ັ', 'າ', 'ຳ', 'ິ', 'ຼ', 'ຽ', 'ໆ', '່', 'ໍ', '໐', '໙', 'ໜ', 'ໝ', 'ༀ', '༊', '་', '་', '༌', '༌', '།', '༗', '༘', '༙', '༚', '༟', '༠', '༩', '༪', '༴', '༵', '༵', '༶', '༶', '༷', '༷', '༸', '༸', '༹', '༹', '༺', '༺', '༻', '༻', '༼', '༼', '༽', '༽', '༾', '༿', 'ཀ', 'ཪ', 'ཱ', '྄', '྅', '྅', '྆', '྇', 'ྈ', 'ྋ', 'ྐ', 'ྼ', '྾', '࿅', '࿆', '࿆', '࿇', '࿏', 'က', 'ဪ', 'ာ', '္', '၀', '၉', '၊', '၏', 'ၐ', 'ၕ', 'ၖ', 'ၙ', 'Ⴀ', '჻', 'ᄀ', 'ᅟ', 'ᅠ', 'ᇹ', 'ሀ', 'ፚ', '፡', '፡', '።', '፨', '፩', '፱', '፲', 'ᙶ', ' ', ' ', 'ᚁ', 'ᚚ', '᚛', '᚛', '᚜', '᚜', 'ᚠ', 'ᜑ', 'ᜒ', '᜔', 'ᜠ', 'ᜱ', 'ᜲ', '᜴', '᜵', 'ᝑ', 'ᝒ', 'ᝓ', 'ᝠ', 'ᝰ', 'ᝲ', 'ᝳ', 'ក', 'ឳ', '឴', '៓', '។', '។', '៕', '៕', '៖', '៚', '៛', '៛', 'ៜ', 'ៜ', '០', '៩', '᠀', '᠅', '᠆', '᠆', '᠇', '᠊', '᠋', '᠎', '᠐', '᠙', 'ᠠ', 'ᢨ', 'ᢩ', 'ᢩ', 'Ḁ', '῾', ' ', ' ', ' ', ' ', ' ', ' ', '​', '​', '‌', '‏', '‐', '‐', '‑', '‑', '‒', '–', '—', '—', '―', '‖', '‗', '‗', '‘', '’', '‚', '‚', '‛', '”', '„', '„', '‟', '‟', '†', '‡', '•', '‣', '․', '…', '‧', '‧', ' ', ' ', '‪', '‮', ' ', ' ', '‰', '‷', '‸', '‸', '‹', '›', '※', '※', '‼', '‼', '‽', '⁃', '⁄', '⁄', '⁅', '⁅', '⁆', '⁆', '⁇', '⁗', ' ', ' ', '⁠', '⁠', '⁡', '⁣', '⁪', '⁯', '⁰', 'ⁱ', '⁴', '⁴', '⁵', '⁼', '⁽', '⁽', '⁾', '⁾', 'ⁿ', 'ⁿ', '₀', '₀', '₁', '₄', '₅', '₌', '₍', '₍', '₎', '₎', '₠', '₦', '₧', '₧', '₨', '₱', '⃐', '⃪', '℀', 'ℂ', '℃', '℃', '℄', '℄', '℅', '℅', '℆', '℈', '℉', '℉', 'ℊ', 'ℒ', 'ℓ', 'ℓ', '℔', 'ℕ', '№', '№', '℗', '℠', '℡', '™', '℣', '℥', 'Ω', 'Ω', '℧', 'K', 'Å', 'Å', 'ℬ', 'ℿ', '⅀', '⅀', '⅁', '⅓', '⅔', '⅕', '⅖', '⅚', '⅛', '⅛', '⅜', '⅝', '⅞', '⅞', '⅟', '⅟', 'Ⅰ', 'Ⅻ', 'Ⅼ', 'Ⅿ', 'ⅰ', 'ⅹ', 'ⅺ', 'Ↄ', '←', '↙', '↚', '⇑', '⇒', '⇒', '⇓', '⇓', '⇔', '⇔', '⇕', '⇿', '∀', '∀', '∁', '∁', '∂', '∃', '∄', '∆', '∇', '∈', '∉', '∊', '∋', '∋', '∌', '∎', '∏', '∏', '∐', '∐', '∑', '∑', '−', '∓', '∔', '∔', '∕', '∕', '∖', '∙', '√', '√', '∛', '∜', '∝', '∠', '∡', '∢', '∣', '∣', '∤', '∤', '∥', '∥', '∦', '∦', '∧', '∬', '∭', '∭', '∮', '∮', '∯', '∳', '∴', '∷', '∸', '∻', '∼', '∽', '∾', '≇', '≈', '≈', '≉', '≋', '≌', '≌', '≍', '≑', '≒', '≒', '≓', '≟', '≠', '≡', '≢', '≣', '≤', '≧', '≨', '≩', '≪', '≫', '≬', '≭', '≮', '≯', '≰', '⊁', '⊂', '⊃', '⊄', '⊅', '⊆', '⊇', '⊈', '⊔', '⊕', '⊕', '⊖', '⊘', '⊙', '⊙', '⊚', '⊤', '⊥', '⊥', '⊦', '⊾', '⊿', '⊿', '⋀', '⌑', '⌒', '⌒', '⌓', '⌨', '〈', '〈', '〉', '〉', '⌫', '⎳', '⎴', '⎴', '⎵', '⎵', '⎶', '⎶', '⎷', '⑊', '①', 'Ⓙ', 'Ⓚ', 'Ⓩ', 'ⓐ', 'ⓩ', '⓪', '⓪', '⓫', '╋', '╌', '╏', '═', '╴', '╵', '╿', '▀', '▏', '▐', '░', '▒', '▕', '▖', '▟', '■', '□', '▢', '▢', '▣', '▩', '▪', '▱', '▲', '△', '▴', '▵', '▶', '▷', '▸', '▻', '▼', '▽', '▾', '▿', '◀', '◁', '◂', '◅', '◆', '◈', '◉', '◊', '○', '○', '◌', '◍', '◎', '◑', '◒', '◡', '◢', '◥', '◦', '◮', '◯', '◯', '◰', '☄', '★', '☆', '☇', '☈', '☉', '☉', '☊', '☍', '☎', '☏', '☐', '☓', '☖', '☗', '☙', '☛', '☜', '☜', '☝', '☝', '☞', '☞', '☟', '☿', '♀', '♀', '♁', '♁', '♂', '♂', '♃', '♟', '♠', '♡', '♢', '♢', '♣', '♥', '♦', '♦', '♧', '♪', '♫', '♫', '♬', '♭', '♮', '♮', '♯', '♯', '♰', '❚', '❛', '❞', '❡', '❡', '❢', '❣', '❤', '❧', '❨', '❨', '❩', '❩', '❪', '❪', '❫', '❫', '❬', '❬', '❭', '❭', '❮', '❮', '❯', '❯', '❰', '❰', '❱', '❱', '❲', '❲', '❳', '❳', '❴', '❴', '❵', '❵', '❶', '⟥', '⟦', '⟦', '⟧', '⟧', '⟨', '⟨', '⟩', '⟩', '⟪', '⟪', '⟫', '⟫', '⟰', '⦂', '⦃', '⦃', '⦄', '⦄', '⦅', '⦅', '⦆', '⦆', '⦇', '⦇', '⦈', '⦈', '⦉', '⦉', '⦊', '⦊', '⦋', '⦋', '⦌', '⦌', '⦍', '⦍', '⦎', '⦎', '⦏', '⦏', '⦐', '⦐', '⦑', '⦑', '⦒', '⦒', '⦓', '⦓', '⦔', '⦔', '⦕', '⦕', '⦖', '⦖', '⦗', '⦗', '⦘', '⦘', '⦙', '⧗', '⧘', '⧘', '⧙', '⧙', '⧚', '⧚', '⧛', '⧛', '⧜', '⧻', '⧼', '⧼', '⧽', '⧽', '⧾', '⫿', '⺀', '　', '、', '。', '〃', '〄', '々', '々', '〆', '〇', '〈', '〈', '〉', '〉', '《', '《', '》', '》', '「', '「', '」', '」', '『', '『', '』', '』', '【', '【', '】', '】', '〒', '〓', '〔', '〔', '〕', '〕', '〖', '〖', '〗', '〗', '〘', '〘', '〙', '〙', '〚', '〚', '〛', '〛', '〜', '〜', '〝', '〝', '〞', '〟', '〠', '〩', '〪', '〯', '〰', '〺', '〻', '〼', '〽', '〿', 'ぁ', 'ぁ', 'あ', 'あ', 'ぃ', 'ぃ', 'い', 'い', 'ぅ', 'ぅ', 'う', 'う', 'ぇ', 'ぇ', 'え', 'え', 'ぉ', 'ぉ', 'お', 'ぢ', 'っ', 'っ', 'つ', 'も', 'ゃ', 'ゃ', 'や', 'や', 'ゅ', 'ゅ', 'ゆ', 'ゆ', 'ょ', 'ょ', 'よ', 'ろ', 'ゎ', 'ゎ', 'わ', 'ゔ', 'ゕ', 'ゖ', '゙', '゚', '゛', 'ゞ', 'ゟ', 'ゟ', '゠', 'ァ', 'ア', 'ア', 'ィ', 'ィ', 'イ', 'イ', 'ゥ', 'ゥ', 'ウ', 'ウ', 'ェ', 'ェ', 'エ', 'エ', 'ォ', 'ォ', 'オ', 'ヂ', 'ッ', 'ッ', 'ツ', 'モ', 'ャ', 'ャ', 'ヤ', 'ヤ', 'ュ', 'ュ', 'ユ', 'ユ', 'ョ', 'ョ', 'ヨ', 'ロ', 'ヮ', 'ヮ', 'ワ', 'ヴ', 'ヵ', 'ヶ', 'ヷ', 'ヺ', '・', '・', 'ー', 'ー', 'ヽ', 'ヽ', 'ヾ', 'ㆷ', 'ㇰ', 'ㇿ', '㈀', '힣', '?', '?', '', '', '豈', '頻', 'ﬀ', 'יִ', 'ﬞ', 'ﬞ', 'ײַ', 'ﴽ', '﴾', '﴾', '﴿', '﴿', 'ﵐ', 'ﷻ', '﷼', '﷼', '︀', '︣', '︰', '︴', '︵', '︵', '︶', '︶', '︷', '︷', '︸', '︸', '︹', '︹', '︺', '︺', '︻', '︻', '︼', '︼', '︽', '︽', '︾', '︾', '︿', '︿', '﹀', '﹀', '﹁', '﹁', '﹂', '﹂', '﹃', '﹃', '﹄', '﹄', '﹅', '﹏', '﹐', '﹐', '﹑', '﹑', '﹒', '﹒', '﹔', '﹕', '﹖', '﹗', '﹘', '﹘', '﹙', '﹙', '﹚', '﹚', '﹛', '﹛', '﹜', '﹜', '﹝', '﹝', '﹞', '﹞', '﹟', '﹨', '﹩', '﹩', '﹪', '﹪', '﹫', '﹫', 'ﹰ', 'ﻼ', '﻿', '﻿', '！', '！', '＂', '＃', '＄', '＄', '％', '％', '＆', '＇', '（', '（', '）', '）', '＊', '＋', '，', '，', '－', '－', '．', '．', '／', '９', '：', '；', '＜', '＞', '？', '？', '＠', 'Ｚ', '［', '［', '＼', '＼', '］', '］', '＾', 'ｚ', '｛', '｛', '｜', '｜', '｝', '｝', '～', '～', '｟', '｟', '｠', '｡', '｢', '｢', '｣', '､', '･', '･', 'ｦ', 'ｦ', 'ｧ', 'ｰ', 'ｱ', 'ﾝ', 'ﾞ', 'ﾟ', 'ﾠ', 'ￜ', '￠', '￠', '￡', '￡', '￢', '￤', '￥', '￦', '￨', '￮', '￹', '￻', '￼', '￼', '�', Character.MAX_VALUE };
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1154 */   static final byte[] raw_classes = new byte[] { 19, 15, 25, 19, 22, 24, 19, 21, 5, 2, 11, 8, 9, 11, 2, 0, 1, 11, 8, 7, 14, 7, 6, 10, 7, 11, 5, 11, 0, 8, 1, 11, 0, 15, 1, 11, 19, 3, 11, 9, 8, 11, 11, 11, 11, 2, 11, 15, 11, 9, 8, 11, 16, 11, 11, 2, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 16, 11, 16, 11, 11, 11, 11, 11, 11, 11, 11, 19, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 19, 11, 7, 15, 19, 11, 19, 11, 19, 11, 19, 11, 19, 10, 11, 19, 11, 19, 11, 19, 11, 19, 10, 11, 19, 11, 19, 11, 19, 11, 19, 11, 19, 11, 19, 11, 19, 11, 19, 11, 19, 11, 10, 11, 19, 11, 19, 11, 19, 10, 11, 8, 11, 19, 11, 19, 11, 10, 19, 11, 19, 11, 19, 11, 19, 11, 10, 19, 11, 19, 11, 19, 11, 10, 11, 19, 11, 19, 10, 11, 19, 11, 19, 11, 10, 19, 11, 19, 11, 10, 19, 11, 19, 11, 10, 19, 11, 19, 11, 20, 19, 20, 19, 8, 20, 19, 11, 10, 4, 20, 19, 20, 19, 20, 19, 10, 20, 11, 15, 3, 11, 19, 11, 10, 11, 19, 11, 19, 11, 19, 0, 1, 0, 1, 19, 11, 19, 11, 19, 11, 19, 11, 19, 11, 20, 19, 10, 11, 20, 19, 11, 12, 19, 11, 15, 11, 10, 11, 15, 11, 0, 1, 11, 19, 11, 19, 11, 19, 11, 19, 20, 19, 4, 15, 4, 8, 11, 10, 11, 16, 11, 19, 10, 11, 19, 11, 15, 3, 15, 18, 19, 15, 3, 15, 17, 11, 11, 2, 0, 2, 0, 2, 11, 11, 13, 15, 22, 19, 3, 9, 11, 2, 11, 4, 11, 4, 0, 1, 11, 15, 3, 11, 19, 11, 11, 11, 0, 1, 11, 11, 11, 11, 0, 1, 8, 9, 8, 19, 11, 9, 11, 11, 11, 9, 11, 11, 11, 8, 11, 11, 11, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 8, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 0, 1, 11, 0, 1, 2, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 2, 11, 5, 11, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 11, 0, 1, 0, 1, 0, 1, 11, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 11, 0, 1, 0, 1, 11, 0, 1, 11, 12, 1, 12, 4, 12, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 12, 0, 1, 0, 1, 0, 1, 0, 1, 4, 0, 1, 12, 19, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 19, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 11, 11, 12, 11, 19, 11, 0, 1, 11, 9, 19, 12, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 12, 1, 12, 1, 4, 5, 12, 0, 1, 0, 1, 0, 1, 12, 8, 9, 12, 11, 3, 5, 12, 8, 9, 12, 0, 1, 12, 1, 12, 1, 12, 4, 12, 5, 12, 0, 12, 1, 12, 0, 12, 1, 12, 0, 1, 0, 1, 4, 11, 4, 11, 4, 11, 9, 8, 12, 8, 11, 19, 28, 11 };
/*      */ }


/* Location:              /mnt/r/ConTenDoViewer.jar!/org/apache/batik/gvt/flow/TextLineBreaks.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       1.1.3
 */